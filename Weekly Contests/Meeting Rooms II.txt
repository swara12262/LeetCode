class Solution {
    public int minMeetingRooms(int[][] intervals) {
     
        //sort the meetings according to start time of intervals
        Arrays.sort(intervals, new Comparator<int[]>(){
            public int compare(int[] a1, int[] a2){
                return a1[0]-a2[0];
            }
        });
        
        //min heap will store end times of all meetings 
        //if start time of next meeting is greater than the end time of min ending time meeting then we will allocate new room ow. we wont
        
        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();
        
        heap.add(intervals[0][1]);
        for(int i=1;i<intervals.length;i++){
            if(intervals[i][0]>= heap.peek()){
                heap.poll();
            }
            heap.add(intervals[i][1]);
        }
        return heap.size();
        
    }
}
