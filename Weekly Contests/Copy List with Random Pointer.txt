/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        Node newHead = null;
        if(head==null)return null;
        //to keep track of old node -> new node mapping to avoid creating same node multiple times
        HashMap<Node, Node> map =new HashMap<Node, Node>();
        Node tmp = head;
        newHead = new Node(head.val);
        map.put(tmp, newHead);
        while(tmp!=null){
            if(tmp.next!=null){
                if(map.containsKey(tmp.next)){
                    newHead.next = map.get(tmp.next);
                }else
                {
                    newHead.next = new Node(tmp.next.val);
                    map.put(tmp.next, newHead.next);
                }
            }
            if(tmp.random!=null){
                if(map.containsKey(tmp.random)){
                    newHead.random = map.get(tmp.random);
                }else
                {
                    newHead.random = new Node(tmp.random.val);
                    map.put(tmp.random, newHead.random);
                }
            }
            tmp = tmp.next;
            newHead=newHead.next;
        }
        return map.get(head);
        
       
    }
}
